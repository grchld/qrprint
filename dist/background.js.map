{"version":3,"file":"background.js","mappings":"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","sources":["webpack://qr-print/./src/print.ts","webpack://qr-print/./src/monochrome.ts","webpack://qr-print/./src/image.ts","webpack://qr-print/./src/qr.ts","webpack://qr-print/./src/contentInjector.ts","webpack://qr-print/./src/highlighter.ts","webpack://qr-print/./src/background.ts"],"sourcesContent":["import { ContentInjector } from \"./contentInjector\";\n\nexport class Printer {\n    readonly injector: ContentInjector;\n\n    constructor(injector: ContentInjector) {\n        this.injector = injector;\n    }\n\n    async print(dataUrl: string, width: string, height: string) {\n        await this.injector.inject(printerInjection, dataUrl, width, height);\n    }\n}\n\nasync function printerInjection(dataUrl: string, width: string, height: string) {\n    const frame = document.createElement(\"iframe\");\n    const { style } = frame;\n    style.display = \"hidden\";\n    style.top = \"0\";\n    style.left = \"0\";\n    style.width = width;\n    style.height = height;\n    style.border = \"0\";\n\n    frame.onload = () => {\n        const closePrint = () => document.body.removeChild(frame);\n        const { contentWindow } = frame;\n        if (contentWindow) {\n            contentWindow.onbeforeunload = closePrint;\n            contentWindow.onafterprint = closePrint;\n            contentWindow.print();\n        }\n    };\n\n    frame.srcdoc = `\n    <html>\n    <head>\n    <style>    \n    body {\n        background-image: url(\"${dataUrl}\");\n        background-size: contain;\n        background-repeat: no-repeat;\n        height: ${height};\n        margin: 0;\n        overflow: hidden;\n        width: ${width};\n    }\n    </style>\n    </head>\n    <body>\n    </body>\n    </html>\n    `;\n\n    document.body.appendChild(frame);\n}\n","export class Monochrome {\n\n    readonly width: number;\n    readonly height: number;\n    readonly #pixels: ReadonlyArray<ReadonlyArray<boolean>> = [];\n\n    constructor(image: ImageBitmap) {\n        const { width, height } = image;\n        this.width = width;\n        this.height = height;\n\n        const canvas = new OffscreenCanvas(width, height);\n        const context = canvas.getContext('2d');\n        if (context == null) {\n            throw new Error(\"No 2d context?\");\n        }\n        context.drawImage(image, 0, 0);\n\n        const rgba = context.getImageData(0, 0, width, height).data;\n        let i = 0;\n        const pixels = [];\n        for (let y = 0; y < height; y++) {\n            const row: Array<boolean> = [];\n            pixels.push(row);\n            for (let x = 0; x < width; x++) {\n                row.push(0.299 * rgba[i] + 0.587 * rgba[i + 1] + 0.114 * rgba[i + 2] <= 128);\n                i += 4;\n            }\n        }\n        this.#pixels = pixels;\n    }\n\n    row(y: number): ReadonlyArray<boolean> {\n        return this.#pixels[y];\n    }\n\n    column(x: number): ReadonlyArray<boolean> {\n        return this.#pixels.map(row => row[x]);\n    }\n\n    get(x: number, y: number): boolean {\n        return this.#pixels[y][x];\n    }\n}","function base64ToArrayBuffer(base64: string) {\n    const binaryString = atob(base64);\n\n    const { length } = binaryString;\n    const bytes = new Uint8Array(length);\n\n    for (let i = 0; i < length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n    }\n\n    return bytes.buffer;\n}\n\nexport async function decodeImage(dataUrl: string): Promise<ImageBitmap> {\n    const [type, base64] = dataUrl.split(\",\");\n    const bytes = base64ToArrayBuffer(base64);\n    const blob = new Blob([bytes], { type });\n    return await createImageBitmap(blob);\n}\n\nexport async function encodeCanvasImage(canvas: OffscreenCanvas, type: string = \"image/png\"): Promise<string> {\n    const blob = await canvas.convertToBlob({ type });\n    const buffer = await blob.arrayBuffer();\n    const bytes = new Uint8Array(buffer);\n    return `data:${type};base64,` + btoa(String.fromCharCode(...bytes));\n\n}","import { Monochrome } from \"./monochrome\";\n\nfunction runLength(a: ReadonlyArray<boolean>): ReadonlyArray<number> {\n    let current = true;\n    let run = 0;\n    const runs = [];\n    for (const value of a) {\n        if (value !== current) {\n            runs.push(run);\n            current = value;\n            run = 1;\n        } else {\n            run++;\n        }\n    }\n    runs.push(run);\n    return runs;\n}\n\nfunction detect11311(a: ReadonlyArray<boolean>): ReadonlyArray<Readonly<{\n    position: number,\n    size: number,\n}>> {\n    const hits = [];\n    const runs = runLength(a);\n    for (let i = 0, p = 0; i < runs.length - 4; p += runs[i] + runs[i + 1], i = i + 2) {\n        const a = runs[i];\n        const b = runs[i + 1];\n        const c = runs[i + 2];\n        const d = runs[i + 3];\n        const e = runs[i + 4];\n        const avg = (a + b + c + d + e) / 7;\n        const dev = avg / 5;\n        const min = avg - dev;\n        const max = avg + dev;\n        if (avg >= 4 && avg < 100 &&\n            min <= a && max >= a &&\n            min <= b && max >= b &&\n            3 * min <= c && 3 * max >= c &&\n            min <= d && max >= d &&\n            min <= e && max >= e\n        ) {\n            hits.push({\n                position: p + Math.floor(avg * 3.5),\n                size: avg,\n            });\n        }\n    }\n    return hits;\n}\n\nconst similarSize = (a: number, b: number): boolean => Math.abs(a - b) * 5 < a + b;\n\ntype Hit = Readonly<{\n    x: number;\n    y: number;\n    size: number;\n}>;\n\nconst key = (x: number, y: number): string => `${x}|${y}`;\n\nfunction intersectHits(rowHits: ReadonlyArray<Hit>, columnHits: ReadonlyArray<Hit>): ReadonlyArray<Hit> {\n    const hits = new Map<string, Hit>();\n    const isNewHit = ({ x, y, size }: Hit): boolean => {\n        const s = Math.ceil(size);\n        for (let dx = -s; dx <= s; dx++) {\n            for (let dy = -s; dy <= s; dy++) {\n                if (hits.get(key(x + dx, y + dy)) != null) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    const addHit = (h: Hit) => {\n        if (isNewHit(h)) {\n            hits.set(key(h.x, h.y), h);\n        }\n    }\n\n    for (const { x: x1, y: y1, size: s1 } of rowHits) {\n        for (const { x: x2, y: y2, size: s2 } of columnHits) {\n            if ((Math.abs(x1 - x2) <= 2) && (Math.abs(y1 - y2) <= 2) &&\n                similarSize(s1, s2)) {\n                addHit({ x: x1, y: y2, size: (s1 + s2) / 2 });\n            }\n        }\n    }\n    return Array.from(hits.values());\n}\n\ntype Grid = Readonly<{\n    top: number,\n    left: number,\n    bottom: number,\n    right: number,\n    size: number,\n}>;\n\nfunction detectGrids(hits: ReadonlyArray<Hit>): ReadonlyArray<Grid> {\n    const grids: Array<Grid> = [];\n\n    const sortedHits = [...hits];\n    sortedHits.sort((a, b) => (a.x - b.x) + 2 * (a.y - b.y));\n\n    for (let i = 0; i < hits.length - 2; i++) {\n        const tl = hits[i];\n        const size = tl.size;\n        const dev = size / 5;\n        for (let j = i + 1; j < hits.length - 1; j++) {\n            const tr = hits[j];\n            const dx = tr.x - tl.x;\n            if (dx < size * 10 || Math.abs(tr.y - tl.y) > dev || !similarSize(tr.size, tl.size)) {\n                continue;\n            }\n            for (let k = j + 1; k < hits.length; k++) {\n                const bl = hits[k];\n                const dy = bl.y - tl.y;\n                if (dy < size * 10 || Math.abs(bl.x - tl.x) > dev || !similarSize(bl.size, tl.size) || !similarSize(dy, dx)) {\n                    continue;\n                }\n                const w = Math.round(dx / size) + 7;\n                const h = Math.round(dy / size) + 7;\n                if (w === h) {\n                    grids.push({\n                        top: tl.y - size * 3.5,\n                        left: tl.x - size * 3.5,\n                        bottom: bl.y + bl.size * 3.5,\n                        right: tr.x + tr.size * 3.5,\n                        size: w,\n                    });\n                }\n            }\n        }\n    }\n\n    return grids;\n}\n\ntype Modules = ReadonlyArray<ReadonlyArray<boolean>>;\n\nfunction extractModules(m: Monochrome, grid: Grid): { threshold: number, modules: Modules } {\n    const { top, left, bottom, right, size } = grid;\n\n    let threshold = 0;\n    const w = (right - left) / size;\n    const h = (bottom - top) / size;\n    const modules = [];\n    for (let j = 0; j < size; j++) {\n        const line: Array<boolean> = [];\n        modules.push(line);\n        const y1 = Math.ceil(top + h * j) + 1;\n        const y2 = Math.floor(y1 + h) - 1;\n        for (let i = 0; i < size; i++) {\n            const x1 = Math.ceil(left + w * i) + 1;\n            const x2 = Math.floor(x1 + w) - 1;\n            let counter = 0;\n            let total = 0;\n            for (let y = y1; y < y2; y++) {\n                for (let x = x1; x < x2; x++) {\n                    total++;\n                    if (m.get(x, y)) {\n                        counter++;\n                    }\n                }\n            }\n            if (2 * counter > total) {\n                line.push(true);\n                threshold = Math.max(threshold, (total - counter) / total);\n            } else {\n                line.push(false);\n                threshold = Math.max(threshold, counter / total);\n            }\n\n        }\n    }\n\n    return { threshold, modules };\n}\n\nexport type QR = Readonly<{\n    grid: Grid;\n    modules: Modules;\n    valid: boolean;\n}>;\n\nfunction extractQR(m: Monochrome, grid: Grid): QR {\n    let bestGrid = grid;\n    let { modules: bestModules, threshold: bestThreshold } = extractModules(m, grid);\n    console.log(`Initial threshold ${bestThreshold} ${bestGrid.left}-${bestGrid.right}x${bestGrid.top}-${bestGrid.bottom}`);\n    const tryGrids = (grids: ReadonlyArray<Grid>): boolean => {\n        let improvement = false;\n        for (const g of grids) {\n            const { threshold, modules } = extractModules(m, g);\n            if (threshold < bestThreshold) {\n                bestGrid = g;\n                bestModules = modules;\n                bestThreshold = threshold;\n                console.log(` better threshold ${bestThreshold} ${bestGrid.left}-${bestGrid.right}x${bestGrid.top}-${bestGrid.bottom}`);\n                improvement = true;\n            }\n        }\n        return improvement;\n    }\n    let tries = 5;\n    while (\n        tries > 0 &&\n        tryGrids([-1, -0.5, 0.5, 1].flatMap(d => [\n            { ...bestGrid, top: bestGrid.top + d },\n            { ...bestGrid, bottom: bestGrid.bottom + d },\n            { ...bestGrid, left: bestGrid.left + d },\n            { ...bestGrid, right: bestGrid.right + d },\n        ])\n        )) { tries--; }\n    const valid = bestThreshold <= 0.25;\n    if (!valid) {\n        console.log('%c%s', 'color:red', `Unclear QR with threshold ${bestThreshold}`);\n    }\n    return { valid, modules: bestModules, grid: bestGrid };\n}\n\nexport function detectQR(m: Monochrome): ReadonlyArray<QR> {\n\n    const rowHits: Array<Hit> = [];\n    for (let y = 0; y < m.height; y++) {\n        rowHits.push(...detect11311(m.row(y)).map(({ position: x, size }) => ({ x, y, size })));\n    }\n\n    const columnHits: Array<Hit> = [];\n    for (let x = 0; x < m.width; x++) {\n        columnHits.push(...detect11311(m.column(x)).map(({ position: y, size }) => ({ x, y, size })));\n    }\n\n    const hits = intersectHits(rowHits, columnHits);\n\n    const grids = detectGrids(hits);\n\n    return grids.map(grid => extractQR(m, grid));\n}\n\nexport function drawQR(modules: Modules, canvas: OffscreenCanvas) {\n    const len = modules.length;\n    const context = canvas.getContext('2d');\n    if (!context) {\n        throw new Error(\"No 2d context for QR?\");\n    }\n    const size = Math.floor(Math.min(canvas.width, canvas.height) / len);\n    const px = Math.floor((canvas.width - size * len) / 2);\n    const py = Math.floor((canvas.height - size * len) / 2);\n    for (let j = 0; j < len; j++) {\n        for (let i = 0; i < len; i++) {\n            context.fillStyle = modules[j][i] ? 'black' : 'white';\n            context.fillRect(px + size * i, py + size * j, size, size);\n        }\n    }\n}","export class ContentInjector {\n\n    readonly tabId: number;\n\n    constructor(tabId: number) {\n        this.tabId = tabId;\n    }\n\n    async inject<Args extends any[], Result>(\n        func: (...args: Args) => Promise<Result>,\n        ...args: Args\n    ): Promise<Result | undefined> {\n        const results = await chrome.scripting.executeScript({\n            target: { tabId: this.tabId },\n            func,\n            args,\n        });\n        return await results[0]?.result;\n    }\n\n}","import { ContentInjector } from \"./contentInjector\";\nimport { encodeCanvasImage } from \"./image\";\n\n\nexport type HighlighterOptions = Readonly<{\n    position: { top: number, left: number },\n    timeout?: number,\n}>;\n\n\nexport class Highlighter {\n\n    readonly contentInjector: ContentInjector;\n\n    constructor(contentInjector: ContentInjector) {\n        this.contentInjector = contentInjector;\n    }\n\n    async highlightCanvas(canvas: OffscreenCanvas, options: HighlighterOptions) {\n        const dataUrl = await encodeCanvasImage(canvas);\n        await this.contentInjector.inject(highligherInjection, dataUrl, canvas.width, canvas.height, options);\n    }\n\n    async highligtSolid(color: string, size: { width: number, height: number }, options: HighlighterOptions) {\n        const { width, height } = size;\n        const canvas = new OffscreenCanvas(width, height);\n        const c = canvas.getContext('2d');\n        if (!c) {\n            throw new Error(\"No 2d context?\");\n        }\n        c.fillStyle = color;\n        c.fillRect(0, 0, width, height);\n        await this.highlightCanvas(canvas, options);\n    }\n}\n\n\nasync function highligherInjection(dataUrl: string, width: number, height: number, options: HighlighterOptions) {\n    const delay = (timeout: number) => new Promise(resolve => setTimeout(resolve, timeout));\n    const nextFrame = () => new Promise(resolve => requestAnimationFrame(resolve));\n\n    const { top, left } = options.position;\n    const timeout = options.timeout ?? 3000;\n    const img = document.createElement('img');\n    const { style } = img;\n    style.top = `${top / devicePixelRatio}px`;\n    style.left = `${left / devicePixelRatio}px`;\n    style.width = `${width / devicePixelRatio}px`;\n    style.height = `${height / devicePixelRatio}px`;\n    style.border = \"0\";\n    style.position = \"fixed\";\n    style.zIndex = \"10000\";\n    style.transition = `opacity ${timeout}ms ease-out`;\n    img.src = dataUrl;\n    document.body.appendChild(img);\n    await nextFrame();\n    await nextFrame();\n    img.style.opacity = \"0\";\n    await delay(timeout);\n    document.body.removeChild(img);\n}","import { Printer } from './print';\nimport { Monochrome } from './monochrome';\nimport { decodeImage, encodeCanvasImage } from './image';\nimport { detectQR, drawQR, QR } from './qr';\nimport { ContentInjector } from './contentInjector';\nimport { Highlighter } from './highlighter';\n\nfunction onClickAction(tab: chrome.tabs.Tab) {\n    chrome.tabs.captureVisibleTab({ format: \"png\" }, async (dataUrl: string) => {\n        const tabId = tab.id;\n        if (tabId == null) {\n            console.error(\"No tab id\");\n            return;\n        }\n\n        const contentInjector = new ContentInjector(tabId);\n\n        const image = await decodeImage(dataUrl);\n        const monochrome = new Monochrome(image);\n        const qrs = detectQR(monochrome);\n\n        highlightQRs(contentInjector, qrs);\n\n        const [qr] = qrs;\n        if (qr && qr.valid) {\n            printQR(contentInjector, qr.modules);\n        }\n\n    });\n}\n\nfunction highlightQRs(contentInjector: ContentInjector, qrs: ReadonlyArray<QR>): void {\n    const highlighter = new Highlighter(contentInjector);\n\n    for (const { valid, grid: { top, left, bottom, right } } of qrs) {\n        highlighter.highligtSolid(\n            valid ? \"#00ff00a0\" : \"#ff0000a0\",\n            { width: right - left + 1, height: bottom - top + 1 },\n            { position: { top, left } });\n    }\n}\n\nasync function printQR(contentInjector: ContentInjector, modules: QR['modules']) {\n    const canvas = new OffscreenCanvas(192, 192);\n    drawQR(modules, canvas);\n    const data = await encodeCanvasImage(canvas);\n\n    const printer = new Printer(contentInjector);\n    printer.print(data, \"2.25in\", \"2.25in\");\n}\n\nchrome.action.onClicked.addListener(onClickAction);"],"names":["Printer","injector","constructor","this","print","dataUrl","width","height","inject","printerInjection","async","frame","document","createElement","style","display","top","left","border","onload","closePrint","body","removeChild","contentWindow","onbeforeunload","onafterprint","srcdoc","appendChild","Monochrome","image","context","OffscreenCanvas","getContext","Error","drawImage","rgba","getImageData","data","i","pixels","y","row","push","x","column","map","get","encodeCanvasImage","canvas","type","blob","convertToBlob","buffer","arrayBuffer","bytes","Uint8Array","btoa","String","fromCharCode","detect11311","a","hits","runs","current","run","value","runLength","p","length","b","c","d","e","avg","dev","min","max","position","Math","floor","size","similarSize","abs","key","extractModules","m","grid","bottom","right","threshold","w","h","modules","j","line","y1","ceil","y2","x1","x2","counter","total","detectQR","rowHits","columnHits","grids","sort","tl","tr","dx","k","bl","dy","round","detectGrids","Map","s1","s2","s","isNewHit","set","Array","from","values","intersectHits","bestGrid","bestModules","bestThreshold","console","log","tryGrids","improvement","g","tries","flatMap","valid","extractQR","ContentInjector","tabId","func","args","results","chrome","scripting","executeScript","target","result","Highlighter","contentInjector","highlightCanvas","options","highligherInjection","highligtSolid","color","fillStyle","fillRect","nextFrame","Promise","resolve","requestAnimationFrame","timeout","img","devicePixelRatio","zIndex","transition","src","opacity","setTimeout","delay","action","onClicked","addListener","tab","tabs","captureVisibleTab","format","id","error","base64","split","binaryString","atob","charCodeAt","base64ToArrayBuffer","Blob","createImageBitmap","decodeImage","qrs","highlighter","highlightQRs","qr","len","px","py","drawQR","printQR"],"sourceRoot":""}