{"version":3,"file":"contentScript.js","mappings":"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","sources":["webpack://qr-print/./src/image.ts","webpack://qr-print/./src/highlighter.ts","webpack://qr-print/./src/monochrome.ts","webpack://qr-print/./src/qr.ts","webpack://qr-print/./src/main.ts","webpack://qr-print/./src/print.ts","webpack://qr-print/./src/contentScript.ts"],"sourcesContent":["function base64ToArrayBuffer(base64: string) {\n    const binaryString = atob(base64);\n\n    const { length } = binaryString;\n    const bytes = new Uint8Array(length);\n\n    for (let i = 0; i < length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n    }\n\n    return bytes.buffer;\n}\n\nexport async function decodeImage(dataUrl: string): Promise<ImageBitmap> {\n    const [type, base64] = dataUrl.split(\",\");\n    const bytes = base64ToArrayBuffer(base64);\n    const blob = new Blob([bytes], { type });\n    return await createImageBitmap(blob);\n}\n\nexport async function encodeCanvasImage(canvas: OffscreenCanvas, type: string = \"image/png\"): Promise<string> {\n    const blob = await canvas.convertToBlob({ type });\n    const buffer = await blob.arrayBuffer();\n    const bytes = new Uint8Array(buffer);\n    return `data:${type};base64,` + btoa(String.fromCharCode(...bytes));\n\n}","import { encodeCanvasImage } from \"./image\";\n\nexport type HighlighterOptions = Readonly<{\n    position: { top: number, left: number },\n    timeout?: number,\n}>;\n\n\nexport class Highlighter {\n\n    async highlightCanvas(canvas: OffscreenCanvas, options: HighlighterOptions) {\n        const dataUrl = await encodeCanvasImage(canvas);\n        await highlight(dataUrl, canvas.width, canvas.height, options);\n    }\n\n    async highligtSolid(color: string, size: { width: number, height: number }, options: HighlighterOptions) {\n        const { width, height } = size;\n        const canvas = new OffscreenCanvas(width, height);\n        const c = canvas.getContext('2d');\n        if (!c) {\n            throw new Error(\"No 2d context?\");\n        }\n        c.fillStyle = color;\n        c.fillRect(0, 0, width, height);\n        await this.highlightCanvas(canvas, options);\n    }\n}\n\n\nasync function highlight(dataUrl: string, width: number, height: number, options: HighlighterOptions) {\n    const delay = (timeout: number) => new Promise(resolve => setTimeout(resolve, timeout));\n    const nextFrame = () => new Promise(resolve => requestAnimationFrame(resolve));\n\n    const { top, left } = options.position;\n    const timeout = options.timeout ?? 3000;\n    const img = document.createElement('img');\n    const { style } = img;\n    style.top = `${top / devicePixelRatio}px`;\n    style.left = `${left / devicePixelRatio}px`;\n    style.width = `${width / devicePixelRatio}px`;\n    style.height = `${height / devicePixelRatio}px`;\n    style.border = \"0\";\n    style.position = \"fixed\";\n    style.zIndex = \"10000\";\n    style.transition = `opacity ${timeout}ms ease-out`;\n    img.src = dataUrl;\n    document.body.appendChild(img);\n    await nextFrame();\n    await nextFrame();\n    img.style.opacity = \"0\";\n    await delay(timeout);\n    document.body.removeChild(img);\n}","export class Monochrome {\n\n    readonly width: number;\n    readonly height: number;\n    readonly #pixels: ReadonlyArray<ReadonlyArray<boolean>> = [];\n\n    constructor(image: ImageBitmap) {\n        const { width, height } = image;\n        this.width = width;\n        this.height = height;\n\n        const canvas = new OffscreenCanvas(width, height);\n        const context = canvas.getContext('2d');\n        if (context == null) {\n            throw new Error(\"No 2d context?\");\n        }\n        context.drawImage(image, 0, 0);\n\n        const rgba = context.getImageData(0, 0, width, height).data;\n        let i = 0;\n        const pixels = [];\n        for (let y = 0; y < height; y++) {\n            const row: Array<boolean> = [];\n            pixels.push(row);\n            for (let x = 0; x < width; x++) {\n                row.push(0.299 * rgba[i] + 0.587 * rgba[i + 1] + 0.114 * rgba[i + 2] <= 128);\n                i += 4;\n            }\n        }\n        this.#pixels = pixels;\n    }\n\n    row(y: number): ReadonlyArray<boolean> {\n        return this.#pixels[y];\n    }\n\n    column(x: number): ReadonlyArray<boolean> {\n        return this.#pixels.map(row => row[x]);\n    }\n\n    get(x: number, y: number): boolean {\n        return this.#pixels[y][x];\n    }\n}","import { Monochrome } from \"./monochrome\";\n\nfunction runLength(a: ReadonlyArray<boolean>): ReadonlyArray<number> {\n    let current = true;\n    let run = 0;\n    const runs = [];\n    for (const value of a) {\n        if (value !== current) {\n            runs.push(run);\n            current = value;\n            run = 1;\n        } else {\n            run++;\n        }\n    }\n    runs.push(run);\n    return runs;\n}\n\nfunction detect11311(a: ReadonlyArray<boolean>): ReadonlyArray<Readonly<{\n    position: number,\n    size: number,\n}>> {\n    const hits = [];\n    const runs = runLength(a);\n    for (let i = 0, p = 0; i < runs.length - 4; p += runs[i] + runs[i + 1], i = i + 2) {\n        const a = runs[i];\n        const b = runs[i + 1];\n        const c = runs[i + 2];\n        const d = runs[i + 3];\n        const e = runs[i + 4];\n        const avg = (a + b + c + d + e) / 7;\n        const dev = avg / 5;\n        const min = avg - dev;\n        const max = avg + dev;\n        if (avg >= 4 && avg < 100 &&\n            min <= a && max >= a &&\n            min <= b && max >= b &&\n            3 * min <= c && 3 * max >= c &&\n            min <= d && max >= d &&\n            min <= e && max >= e\n        ) {\n            hits.push({\n                position: p + Math.floor(avg * 3.5),\n                size: avg,\n            });\n        }\n    }\n    return hits;\n}\n\nconst similarSize = (a: number, b: number): boolean => Math.abs(a - b) * 5 < a + b;\n\ntype Hit = Readonly<{\n    x: number;\n    y: number;\n    size: number;\n}>;\n\nconst key = (x: number, y: number): string => `${x}|${y}`;\n\nfunction intersectHits(rowHits: ReadonlyArray<Hit>, columnHits: ReadonlyArray<Hit>): ReadonlyArray<Hit> {\n    const hits = new Map<string, Hit>();\n    const isNewHit = ({ x, y, size }: Hit): boolean => {\n        const s = Math.ceil(size);\n        for (let dx = -s; dx <= s; dx++) {\n            for (let dy = -s; dy <= s; dy++) {\n                if (hits.get(key(x + dx, y + dy)) != null) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    const addHit = (h: Hit) => {\n        if (isNewHit(h)) {\n            hits.set(key(h.x, h.y), h);\n        }\n    }\n\n    for (const { x: x1, y: y1, size: s1 } of rowHits) {\n        for (const { x: x2, y: y2, size: s2 } of columnHits) {\n            if ((Math.abs(x1 - x2) <= 2) && (Math.abs(y1 - y2) <= 2) &&\n                similarSize(s1, s2)) {\n                addHit({ x: x1, y: y2, size: (s1 + s2) / 2 });\n            }\n        }\n    }\n    return Array.from(hits.values());\n}\n\ntype Grid = Readonly<{\n    top: number,\n    left: number,\n    bottom: number,\n    right: number,\n    size: number,\n}>;\n\nfunction detectGrids(hits: ReadonlyArray<Hit>): ReadonlyArray<Grid> {\n    const grids: Array<Grid> = [];\n\n    const sortedHits = [...hits];\n    sortedHits.sort((a, b) => (a.x - b.x) + 2 * (a.y - b.y));\n\n    for (let i = 0; i < hits.length - 2; i++) {\n        const tl = hits[i];\n        const size = tl.size;\n        const dev = size / 5;\n        for (let j = i + 1; j < hits.length - 1; j++) {\n            const tr = hits[j];\n            const dx = tr.x - tl.x;\n            if (dx < size * 10 || Math.abs(tr.y - tl.y) > dev || !similarSize(tr.size, tl.size)) {\n                continue;\n            }\n            for (let k = j + 1; k < hits.length; k++) {\n                const bl = hits[k];\n                const dy = bl.y - tl.y;\n                if (dy < size * 10 || Math.abs(bl.x - tl.x) > dev || !similarSize(bl.size, tl.size) || !similarSize(dy, dx)) {\n                    continue;\n                }\n                const w = Math.round(dx / size) + 7;\n                const h = Math.round(dy / size) + 7;\n                if (w === h) {\n                    grids.push({\n                        top: tl.y - size * 3.5,\n                        left: tl.x - size * 3.5,\n                        bottom: bl.y + bl.size * 3.5,\n                        right: tr.x + tr.size * 3.5,\n                        size: w,\n                    });\n                }\n            }\n        }\n    }\n\n    return grids;\n}\n\ntype Modules = ReadonlyArray<ReadonlyArray<boolean>>;\n\nfunction extractModules(m: Monochrome, grid: Grid): { threshold: number, modules: Modules } {\n    const { top, left, bottom, right, size } = grid;\n\n    let threshold = 0;\n    const w = (right - left) / size;\n    const h = (bottom - top) / size;\n    const modules = [];\n    for (let j = 0; j < size; j++) {\n        const line: Array<boolean> = [];\n        modules.push(line);\n        const y1 = Math.ceil(top + h * j) + 1;\n        const y2 = Math.floor(y1 + h) - 1;\n        for (let i = 0; i < size; i++) {\n            const x1 = Math.ceil(left + w * i) + 1;\n            const x2 = Math.floor(x1 + w) - 1;\n            let counter = 0;\n            let total = 0;\n            for (let y = y1; y < y2; y++) {\n                for (let x = x1; x < x2; x++) {\n                    total++;\n                    if (m.get(x, y)) {\n                        counter++;\n                    }\n                }\n            }\n            if (2 * counter > total) {\n                line.push(true);\n                threshold = Math.max(threshold, (total - counter) / total);\n            } else {\n                line.push(false);\n                threshold = Math.max(threshold, counter / total);\n            }\n\n        }\n    }\n\n    return { threshold, modules };\n}\n\nexport type QR = Readonly<{\n    grid: Grid;\n    modules: Modules;\n    valid: boolean;\n}>;\n\nfunction extractQR(m: Monochrome, grid: Grid): QR {\n    let bestGrid = grid;\n    let { modules: bestModules, threshold: bestThreshold } = extractModules(m, grid);\n    console.log(`Initial threshold ${bestThreshold} ${bestGrid.left}-${bestGrid.right}x${bestGrid.top}-${bestGrid.bottom}`);\n    const tryGrids = (grids: ReadonlyArray<Grid>): boolean => {\n        let improvement = false;\n        for (const g of grids) {\n            const { threshold, modules } = extractModules(m, g);\n            if (threshold < bestThreshold) {\n                bestGrid = g;\n                bestModules = modules;\n                bestThreshold = threshold;\n                console.log(` better threshold ${bestThreshold} ${bestGrid.left}-${bestGrid.right}x${bestGrid.top}-${bestGrid.bottom}`);\n                improvement = true;\n            }\n        }\n        return improvement;\n    }\n    let tries = 5;\n    while (\n        tries > 0 &&\n        tryGrids([-1, -0.5, 0.5, 1].flatMap(d => [\n            { ...bestGrid, top: bestGrid.top + d },\n            { ...bestGrid, bottom: bestGrid.bottom + d },\n            { ...bestGrid, left: bestGrid.left + d },\n            { ...bestGrid, right: bestGrid.right + d },\n        ])\n        )) { tries--; }\n    const valid = bestThreshold <= 0.25;\n    if (!valid) {\n        console.log('%c%s', 'color:red', `Unclear QR with threshold ${bestThreshold}`);\n    }\n    return { valid, modules: bestModules, grid: bestGrid };\n}\n\nexport function detectQR(m: Monochrome): ReadonlyArray<QR> {\n\n    const rowHits: Array<Hit> = [];\n    for (let y = 0; y < m.height; y++) {\n        rowHits.push(...detect11311(m.row(y)).map(({ position: x, size }) => ({ x, y, size })));\n    }\n\n    const columnHits: Array<Hit> = [];\n    for (let x = 0; x < m.width; x++) {\n        columnHits.push(...detect11311(m.column(x)).map(({ position: y, size }) => ({ x, y, size })));\n    }\n\n    const hits = intersectHits(rowHits, columnHits);\n\n    const grids = detectGrids(hits);\n\n    return grids.map(grid => extractQR(m, grid));\n}\n\nexport function drawQR(modules: Modules, canvas: OffscreenCanvas) {\n    const len = modules.length;\n    const context = canvas.getContext('2d');\n    if (!context) {\n        throw new Error(\"No 2d context for QR?\");\n    }\n    const size = Math.floor(Math.min(canvas.width, canvas.height) / len);\n    const px = Math.floor((canvas.width - size * len) / 2);\n    const py = Math.floor((canvas.height - size * len) / 2);\n    for (let j = 0; j < len; j++) {\n        for (let i = 0; i < len; i++) {\n            context.fillStyle = modules[j][i] ? 'black' : 'white';\n            context.fillRect(px + size * i, py + size * j, size, size);\n        }\n    }\n}","import { Highlighter } from \"./highlighter\";\nimport { decodeImage, encodeCanvasImage } from \"./image\";\nimport { Monochrome } from \"./monochrome\";\nimport { detectQR, drawQR, QR } from \"./qr\";\nimport { print } from \"./print\";\n\n\nexport async function detect(dataUrl: string): Promise<void> {\n    const image = await decodeImage(dataUrl);\n    const monochrome = new Monochrome(image);\n    const qrs = detectQR(monochrome);\n\n    highlightQRs(qrs);\n\n    const [qr] = qrs;\n    if (qr && qr.valid) {\n        printQR(qr.modules);\n    }\n}\n\nfunction highlightQRs(qrs: ReadonlyArray<QR>): void {\n    const highlighter = new Highlighter();\n\n    for (const { valid, grid: { top, left, bottom, right } } of qrs) {\n        highlighter.highligtSolid(\n            valid ? \"#00ff00a0\" : \"#ff0000a0\",\n            { width: right - left + 1, height: bottom - top + 1 },\n            { position: { top, left } });\n    }\n}\n\nasync function printQR(modules: QR['modules']) {\n    const canvas = new OffscreenCanvas(192, 192);\n    drawQR(modules, canvas);\n    const data = await encodeCanvasImage(canvas);\n\n    print(data, \"2.25in\", \"2.25in\");\n}\n","export async function print(dataUrl: string, width: string, height: string) {\n    const frame = document.createElement(\"iframe\");\n    const { style } = frame;\n    style.display = \"hidden\";\n    style.top = \"0\";\n    style.left = \"0\";\n    style.width = width;\n    style.height = height;\n    style.border = \"0\";\n\n    frame.onload = () => {\n        const closePrint = () => document.body.removeChild(frame);\n        const { contentWindow } = frame;\n        if (contentWindow) {\n            contentWindow.onbeforeunload = closePrint;\n            contentWindow.onafterprint = closePrint;\n            contentWindow.print();\n        }\n    };\n\n    frame.srcdoc = `\n    <html>\n    <head>\n    <style>    \n    html, body, img {\n        border: 0;\n        height: ${height};\n        margin: 0;\n        overflow: hidden;\n        padding: 0;\n        width: ${width};\n    }\n    </style>\n    </head>\n    <body>\n    <img src=\"${dataUrl}\"/>\n    </body>\n    </html>\n    `;\n\n    document.body.appendChild(frame);\n}\n","import { detect } from \"./main\";\nimport { ExtensionRequest } from \"./messages\";\n\n\nfunction onMessage(message: ExtensionRequest, _sender: unknown, sendResponse: (reply: unknown) => void): boolean {\n\n    switch (message.type) {\n        case 'detect':\n            detect(message.dataUrl).then(sendResponse);\n            return true;\n            break;\n        case 'close':\n            chrome.runtime.onMessage.removeListener(onMessage);\n            break;\n    }\n\n    return false;\n}\n\nif (chrome.runtime.onMessage.hasListeners()) {\n    console.log(\"Content script is already loaded\");\n} else {\n    chrome.runtime.onMessage.addListener(onMessage);\n}\n"],"names":["async","encodeCanvasImage","canvas","type","blob","convertToBlob","buffer","arrayBuffer","bytes","Uint8Array","btoa","String","fromCharCode","Highlighter","highlightCanvas","options","dataUrl","width","height","nextFrame","Promise","resolve","requestAnimationFrame","top","left","position","timeout","img","document","createElement","style","devicePixelRatio","border","zIndex","transition","src","body","appendChild","opacity","setTimeout","delay","removeChild","highlight","highligtSolid","color","size","OffscreenCanvas","c","getContext","Error","fillStyle","fillRect","this","Monochrome","constructor","image","context","drawImage","rgba","getImageData","data","i","pixels","y","row","push","x","column","map","get","detect11311","a","hits","runs","current","run","value","runLength","p","length","b","d","e","avg","dev","min","max","Math","floor","similarSize","abs","key","extractModules","m","grid","bottom","right","threshold","w","h","modules","j","line","y1","ceil","y2","x1","x2","counter","total","detectQR","rowHits","columnHits","grids","sort","tl","tr","dx","k","bl","dy","round","detectGrids","Map","s1","s2","s","isNewHit","set","Array","from","values","intersectHits","bestGrid","bestModules","bestThreshold","console","log","tryGrids","improvement","g","tries","flatMap","valid","extractQR","detect","base64","split","binaryString","atob","charCodeAt","base64ToArrayBuffer","Blob","createImageBitmap","decodeImage","qrs","highlighter","highlightQRs","qr","len","px","py","drawQR","frame","display","onload","closePrint","contentWindow","onbeforeunload","onafterprint","print","srcdoc","printQR","chrome","runtime","onMessage","hasListeners","addListener","message","_sender","sendResponse","then","removeListener"],"sourceRoot":""}